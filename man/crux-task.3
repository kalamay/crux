.TH CRUX-TASK 3 2016-12-18 libcrux "Crux Programmer's Manual"
.SH "NAME"
\fBcrux-task\fR - Coroutine-based cooperative concurrency


.SH "SYNOPSIS"
.P
The task module implements light-weight nonpreemptive subroutines for
implementing cooperative tasks. While these tasks are used within the hub,
they may be used independantly or with in the hub tasks. Each task is given
an independant stack, optional local storage, and a context for saveing and
restoring execution state. This enables the task to yield values through a
non-local jump, yet still resume operation at a later time.
.P
This context relationship is expressed as a parent-child model. That is, the
context that call \fBxresume\fR on a task becomes the parent of the task. The
child may then \fByield\fR context back to the parent.
.P
Each task is a single allocation using \fBmmap\fR(2). This single mapping
contains the space for the task object, the local storage, the stack, and the
optional stack protector lock. The stack size will be at least as the size
defined by the task manager. The entire allocation size (stack size, tls, task
object, and lock) will be rounded up to the nearest multiple of the system page
size. Any extra space caused by this will be given to the stack segment.
Additionally, the task locak storage will be guaranteed to reside at a 16-byte
aligned region.
.P
For downward growing stacks, the mapping layout looks like:
.RS
.nf
+------+----------------------+-----+------+
| lock |                stack | tls | task |
+------+----------------------+-----+------+
.fi
.RE
.P
For upward growing stack, the mapping looks like:
.RS
.nf
+------+-----+----------------------+------+
| task | tls | stack                | lock |
+------+-----+----------------------+------+
.fi
.RE


.SH "USAGE"
.P
.nf
\fB#include <crux.h>\fR
.fi

.SS \fIManager\fR
.P
A task manager instance is required for creating tasks. This type maintains
information about the tasks such as stack size, task-local storage size, and
allocation and runtime flags for the tasks. That is, all tasks created from
the same manager will all have these propererties in common. As a result, the
manager maintains a free list of task allocations so that subsequent tasks
may allocate quicker.

.P
.nf
\fBstruct xmgr;\fR
.fi
.RS
Opaque type for the task manager instance.
.RE

.P
.nf
\fBint\fR
\fBxmgr_new\fR (\fBstruct xmgr \fR**\fImgrp\fR, \fBsize_t \fItls\fR, \fBsize_t \fIstack\fR, \fBint \fIflags\fR);
.fi
.RS
Create a new task manager for use in creating tasks.
.TP
\fImgrp\fR
Indireect reference to the task manager. Upon return, the dereferenced pointer
will contain the newly allocated task manager if successful. On failure, this
value will be unmodified.
.TP
\fItls\fR
Space in bytes allocated for task local storage.
.TP
\fIstack\fR
Miminum stack size in bytes allocated for each task.
.TP
\fIflags\fR
Flags used for the task manager and each task create using it.
.P
Return values from this function may be:
.TP
\fI0\fR
The manager was created successfully.
.TP
\fI-ENOMEM\fR
There was insufficient memory to allocate the object.
.TP
\fI-EINVAL\fR
The requested stack size outside the allowed range.
.TP
\fI-EINVAL\fR
The requested task local storage size is larger than allowed.
.RE

.P
.nf
\fBvoid\fR
\fBxmgr_free\fR (\fBstruct xmgr \fR**\fImgrp\fR);
.fi
.RS
Frees the task manager and \fBNULL\fRs the reference. This must only be called
after all tasks created by the manager are freed.
.TP
\fImgrp\fR
Indireect reference to the task manager. This value must not be \fBNULL\fR,
however, the referenced value may be \fBNULL\fR. Upon return, the dereferenced
pointer will be \fBNULL\fR.
.RE

.P
.nf
\fBstruct xmgr \fR*
\fBxmgr_self\fR (\fBvoid\fR);
.fi
.RS
Gets the task manager that created the currently active task. If no task is
active, \fBNULL\fR will be returned.
.RE

.P
.fn
\fB#define XSTACK_MIN\fR
.fi
.RS
The minimum allowed stack size for tasks.
.RE

.P
.nf
\fB#define XSTACK_MAX\fR
.fi
.RS
The maximum allowed stack size for tasks.
.RE

.P
.nf
\fB#define XSTACK_DEFAULT\fR
.fi
.RS
The default stack size. This should be large enough to all off glibc functions.
.RE

.P
.nf
\fB#define XTASK_TLS_MAX\fR
.fi
.RS
The maximum allowed task locak storage size.
.RE

.P
.nf
\fB#define XTASK_FPROTECT\fR
.fi
.RS
Protect the end of the stack. Enabling this will cause the process to segfault
if the stack overflows. This is highly recommended. This does require an
additional page to be allocated for the stack. However, this is an \fBmmap\fR(2)
in most cases, so it should place little additional memory pressue on the system.
.RE

.P
.nf
\fB#define XTASK_FENTRY\fR
.fi
.RS
Flag to enable capturing the symbol name of the entry function. This is only
available if \fBdladdr\fR(3) is available on the system.
.RE

.P
.nf
\fB#define XTASK_FDEFAULT\fR
.fi
.RS
A default set of flage for typical usage scenarios.
.RE

.P
.nf
\fB#define XTASK_FDEBUG\fR
.fi
.RS
A set of flags for maximizing debuggability of the tasks.
.RE

.SS \fITask\fR
.P
Tasks implement the nonpremptive subroutine given a function as an entry point.
A task is created in a "suspended" state. It becomes active when explicitly
resumed. The context that resumes the task becomes the parent context of the
task. The task may then yield a value back to the parent context. Yielding
causes the current execution context to be captured, put back into a suspended
state, and the parent context to regain context. This sequence may be completed
repeatedly. When the task function returns (rather than yields), the task will
be marked as exited, and the parent is given back context. Once in an exited
state, the task may no longer be resumed.

.P
.nf
\fBstruct xmgr;\fR
.fi
.RS
Opaque type for the task instance.
.RE

.P
.nf
\fB#define xtask_new\fR(\fItp\fR, \fImgr\fR, \fItls\fR, \fIfn\fR)
.fi
.RS
The is the preffered way to construct a new task object. It works identically
to \fBxtask_newf\fR, however it uses the compiler provided \fB__FILE__\fR and
\fB__LINE__\fR values to capture the allocation debugging information.
.P
The function signature for \fIfn\fR is:
.RS
.nf
\fBunion xvalue\fR (*\fIfn\fR)(\fBvoid \fR*\fItls\fR, \fBunion xvalue\fR)
.fi
.RE
.TP
\fItp\fR
Indireect reference to the task. Upon return, the dereferenced pointer will
contain the newly allocated task manager if successful. On failure, this
value will be unmodified.
.TP
\fImgr\fR
Task manager pointer.
.TP
\fItls\fR
Task local storage reference to copy or \fBNULL\fR. If a non-zero storage space
was specified for the manager, this number of bytes will be copied from the
value pointed at by \fItls\fR unless it is \fBNULL\fR, in which case, the task
local storage will be zero-filled. If a 0-length storage space was specified
for the task manager, this value will be ignored.
.TP
\fIfn\fR
The function to execute in the new context.
.P
Return values from this function may be:
.TP
\fI0\fR
The manager was created successfully.
.TP
\fI-ENOMEM\fR
No memory is available, or the process's maximum number of mappings would have been exceeded.
.TP
\fI-EINVAL\fR
The requested stack size outside the allowed range.
.RE

.P
.nf
\fBint\fR
\fBxtask_newf\fR (\fBstruct xtask \fR**\fItp\fR, \fBstruct xmgr \fR*\fImgr\fR, \fBvoid \fR*\fItls\fR,
            \fBconst char \fR*\fIfile\fR, \fBint \fIline\fR,
            \fBunion xvalue\fR (*\fIfn\fR)(\fBvoid \fR*\fItls\fR, \fBunion xvalue\fR));
.fi
.RS
Creates a new task with optional initial local storage. The newly created task
will be in a suspended state. Calling \fBxresume\fR on the returned value will
transfer execution context to the function \fBfn\fR.
.TP
\fItp\fR
Indireect reference to the task. Upon return, the dereferenced pointer will
contain the newly allocated task manager if successful. On failure, this
value will be unmodified.
.TP
\fImgr\fR
Task manager pointer.
.TP
\fItls\fR
Task local storage reference to copy or \fBNULL\fR. If a non-zero storage space
was specified for the manager, this number of bytes will be copied from the
value pointed at by \fItls\fR unless it is \fBNULL\fR, in which case, the task
local storage will be zero-filled. If a 0-length storage space was specified
for the task manager, this value will be ignored.
.TP
\fIfile\fR
Source file path for debugging information.
.TP
\fIline\fR
Source file line number for debugging information.
.TP
\fIfn\fR
The function to execute in the new context.
.P
Return values from this function may be:
.TP
\fI0\fR
The manager was created successfully.
.TP
\fI-ENOMEM\fR
No memory is available, or the process's maximum number of mappings would have been exceeded.
.TP
\fI-EINVAL\fR
The requested stack size outside the allowed range.
\" these error codes go into xspawnf in crux-hub(3)
.RE

.P
.nf
\fBvoid\fR
\fBxtask_free\fR (\fBstruct xtask \fR**\fItp\fR);
.fi
.RS
Frees the task and \fBNULL\fRs the reference.
.TP
\fImgrp\fR
Indireect reference to the task. This value must not be \fBNULL\fR, however,
the referenced value may be \fBNULL\fR. Upon return, the dereferenced
pointer will be \fBNULL\fR.
.RE

.P
.nf
\fBstruct xtask \fR*
\fBxtask_self\fR (\fBvoid\fR);
.fi
.RS
Gets the task currently executing or \fBNULL\fR no task has been started.
.RE

.P
.nf
\fBvoid \fR*
\fBxtask_local\fR (\fBstruct xtask \fR*\fIt\fR);
.fi
.RS
Gets task local storage for the task.
.TP
\fIt\fR
The task object.
.P
This returns \fBNULL\fR if the local storage space is zero-length.
.RE

.P
.nf
\fBbool\fR
\fBxtask_alive\fR (\fBconst struct xtask \fR*\fIt\fR);
.fi
.RS
Test if the task is either in a suspended or active state. That is, it has not
yet exited.
.TP
\fIt\fR
The task object.
.RE

.P
.nf
\fBint\fR
\fBxtask_exitcode\fR (\fBconst struct xtask \fR*\fIt\fR);
.fi
.RS
Gets the exit code for the task.
.TP
\fIt\fR
The task object.
.P
Return values from this function may be:
.TP
\fI0\fR
The task exited normally or was forcefully exited with no exit code.
.TP
\fI1-255\fR
Lower 8 bits of the exit code sent by \fBxtask_exit\fR.
.TP
\fI-1\fR
The task has not yet exited.
.RE

.P
.nf
\fBint\fR
\fBxtask_exit\fR (\fBstruct xtask \fR*\fIt\fR, \fBint \fIec\fR);
.fi
.RS
Forces a task to exit.
.TP
\fIt\fR
The task object or \fBNULL\fR for the task that currently has context.
.TP
\fIec\fR
The exit code. Only the lower 8 bits will be exposed.
.P
Return values from this function may be:
.TP
\fI0\fR
The task has successfully exited.
.TP
\fI-EPERM\fR
The current context is not a task.
.TP
\fI-EALREADY\fR
The task has already exited.
.RE

.P
.nf
\fBvoid\fR
\fBxtask_print\fR (\fBconst struct xtask \fR*\fIt\fR, \fBFILE \fR*\fIout\fR);
.fi
.RS
Prints a representation of the task. This will include a task stack of all
parent tasks.
.TP
\fIt\fR
The task object or \fBNULL\fR. If\fBNULL\fR, the representation will indicate
it ias such. That is, \fBNULL\fR is not substituted for the current task.
.TP
\fIout\fR
File pointer to write the representation to. If this is \fBNULL\fR, \fBstdout\fR
will be used.
.RE

.P
.nf
\fBunion xvalue\fR
\fBxyield\fR (\fBunion xvalue \fIval\fR);
.fi
.RS
Transfers the current context to the parent context. The \fIval\fR passed in will
be returned from the companion \fBxresume\fR in the parent. If the task regains
context, the value returned will be that which was passed to the \fBxresume\fR.
.P
This will abort the process if the current context is not a task.
.TP
\fIval\fR
Value to yield to the parent.
.RE

.P
.nf
\fBunion xvalue\fR
\fBxresume\fR (\fBstruct xtask \fR*\fIt\fR, \fBunion xvalue \fIval\fR);
.fi
.RS
Transfers the current context to the task, making it the child of the current
context. The \fIval\fR passed in will be returned from the companion \fBxyield\fR
in the child. When the child yields again (or exits), the value returned by
\fBxresume\fR will be this yielded value.
.P
This will abort the process if the task is not suspended.
.TP
\fIt\fR
The task object.
.TP
\fIval\fR
Value to resume the child task with.
.RE

.SS \fITask Functions\fR
.P
These are functions that may be called when a task has context.

.P
.nf
\fBint\fR
\fBxdefer\fR (\fBvoid\fR (*\fIfn\fR) (\fBvoid\fR *), \fBvoid\fR *\fIdata\fR);
.fi
.RS
.P
Schedules a function to execute when the task terminates or is freed. Deferred
functions will be called after the exit of the coroutine function but before
yielding back to the parent context. Deferred calls occur in LIFO order and may
resume other tasks.
.TP
\fIfn\fR
The function pointer to call.
.TP
\fIdata\fR
User pointer to pass to the function.
.P
Return values from this function may be:
.TP
\fI0\fR
The manager was created successfully.
.TP
\fI-ENOMEM\fR
There was insufficient memory to allocate the object.
.RE

.P
.nf
\fBvoid *\fR
\fBxmalloc\fR (\fBsize_t\fR \fIsize\fR);
.fi
.RS
.P
Creates an allocation with a deferred free.
.TP
\fIsize\fR
The number of bytes to allocate.
.RE

.P
.nf
\fBvoid *\fR
\fBxcalloc\fR (\fBsize_t\fR \fIcount\fR, \fBsize_t\fR \fIsize\fR);
.fi
.RS
.P
Creates a zeroed allocation with a deferred free.
.TP
\fIcount\fR
The number of contiguous objects.
.TP
\fIsize\fR
The number of bytes for each object.
.RE

.SS \fIValue\fR
.P
The type used for passing values between \fBxresume\fR and \fBxyield\fR:
.P
.nf
\fBunion xvalue\fR {
.RS
\fBuint64_t \fIu64\fR;
\fBint64_t \fIi64\fR;
\fBvoid \fR*\fIptr\fR;
\fBint \fIi\fR;
.RE
};

.P
.nf
\fB#define XPTR\fR(\fIv\fR)\fR
.fi
.RS
Declares a value holding a pointer.
.TP
\fIv\fR
A \fBvoid \fR*\fR value.
.RE

.P
.nf
\fB#define XU64\fR(\fIv\fR)\fR
.fi
.RS
Declares a value holding an unsigned 64-bit integer
.TP
\fIv\fR
A \fBuint64_t\fR value.
.RE

.P
.nf
\fB#define XI64\fR(\fIv\fR)\fR
.fi
.RS
Declares a value holding a signed 64-bit integer
.TP
\fIv\fR
An \fBint64_t\fR value.
.RE

.P
.nf
\fB#define XDBL\fR(\fIv\fR)\fR
.fi
.RS
Declares a value holding a double length floating point number.
.TP
\fIv\fR
A \fBdouble\fR value.
.RE

.P
.nf
\fB#define XINT\fR(\fIv\fR)\fR
.fi
.RS
Declares a value holding a platform-specific integer.
.TP
\fIv\fR
An \fBint\fR value.
.RE

.P
.nf
\fB#define XZERO\fR
.fi
.RS
Declares a value containing zero
.RE


.SH "EXAMPLE"
.nf
#include <crux.h>
#include <stdio.h>

struct msg {
	struct xtask *fib;
};

static union xvalue
fib (void *data, union xvalue val)
{
	xtask_print (xtask_self (), stdout);
	int a = 0, b = 1;
	while (true) {
		int r = a;
		a = b;
		b += r;
		xyield (XINT (r));
	}
	return XZERO;
}

static union xvalue
fib3 (void *data, union xvalue val)
{
	struct msg *msg = data;
	int i = 0;
	while (true) {
		xresume (msg->fib, XZERO);
		xresume (msg->fib, XZERO);
		val = xresume (msg->fib, XZERO);
		if (++i < 10) { xyield (val); }
		else          { return val; }
	}
}

int
main (void)
{
	struct xmgr *mgr;
	xcheck (xmgr_new (&mgr, sizeof (struct msg), XSTACK_DEFAULT, XTASK_FDEBUG));

	struct xtask *t1, *t2;
	xcheck (xtask_new (&t1, mgr, NULL, fib));

	struct msg msg = { t1 };
	xcheck (xtask_new (&t2, mgr, &msg, fib3));

	while (xtask_alive (t2)) {
		union xvalue val = xresume (t2, XZERO);
		printf ("%d\\n", val.i);
	}

	xtask_free (&t1);
	xtask_free (&t2);
	xmgr_free (&mgr);
}

.fi
